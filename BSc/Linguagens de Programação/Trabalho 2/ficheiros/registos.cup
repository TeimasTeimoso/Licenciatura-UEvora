import java_cup.runtime.*;

action code {:
  // cria uma instancia da maquina
  TISC maquina = new TISC();
:} ;

parser code {:
  Yylex lexer;

  public void report_error(String message, Object error_info) {
    Symbol info = (Symbol) error_info;

    System.err.print("** " + message);
    System.err.println(" at `" + info.value + "' in position " + info.left+ " **");
  }

  public void report_fatal_error(String message, Object obj) {
    System.err.println("** " + message);
  }
:} ;

init with 			{: lexer = new Yylex(System.in); :} ;

scan with 			{: return lexer.yylex(); :} ;

terminal        	ADD, SUB, MULT, DIV, MOD, EXP ;
terminal        	PUSH_INT, PUSH_VAR, STORE_VAR, PUSH_ARG, STORE_ARG ;
terminal        	SET_ARG, CALL, LOCALS, RETURN ;
terminal        	JUMP, JEQ, JLT ;
terminal        	PRINT, PRINT_STR, PRINT_NL;
terminal String 	IDENTIFICADOR ;
terminal String		INTEIRO, STRING ;
terminal        	DOIS_PONTOS;
terminal			ERRO ;

non terminal 	  	TISC programa ;
non terminal      	etiqueta, instrucao ;


programa ::= /*empty*/
			 |programa etiqueta instrucao 			{: RESULT = maquina; :}
			 ;

etiqueta ::= IDENTIFICADOR:e DOIS_PONTOS			{: maquina.labels.put(e, maquina.memInstrucao.size()); :}
	 |
	 ;

instrucao ::= 	ADD 								{: maquina.memInstrucao.add(new Soma(maquina)); :}
			|   SUB									{: maquina.memInstrucao.add(new Sub(maquina)); :}
	  		|   MULT								{: maquina.memInstrucao.add(new Mult(maquina)); :}
	  		|   DIV									{: maquina.memInstrucao.add(new Div(maquina)); :}
	  		|   MOD									{: maquina.memInstrucao.add(new Mod(maquina)); :}
	  		|   EXP									{: maquina.memInstrucao.add(new Exp(maquina)); :}
	  		|   PUSH_INT INTEIRO:i					{: maquina.memInstrucao.add(new PushInt(Integer.parseInt(i))); :}
	  		|   PUSH_VAR INTEIRO:d INTEIRO:n		{: maquina.memInstrucao.add(new PushVar(Integer.parseInt(d), Integer.parseInt(n))); :}
	  		|   PUSH_ARG INTEIRO:d INTEIRO:n		{: maquina.memInstrucao.add(new PushArg(Integer.parseInt(d), Integer.parseInt(n))); :}
	  		|   STORE_VAR INTEIRO:d INTEIRO:n		{: maquina.memInstrucao.add(new StoreVar(Integer.parseInt(d), Integer.parseInt(n))); :}
	  		|   STORE_ARG INTEIRO:d INTEIRO:n		{: maquina.memInstrucao.add(new StoreArg(Integer.parseInt(d), Integer.parseInt(n))); :}
	  		|   SET_ARG INTEIRO:n					{: maquina.memInstrucao.add(new SetArg(Integer.parseInt(n))); :}
	  		|   CALL INTEIRO:d IDENTIFICADOR:p		{: maquina.memInstrucao.add(new Chama(Integer.parseInt(d), p)); :}
	  		|   LOCALS INTEIRO:a INTEIRO:v			{: maquina.memInstrucao.add(new Locals(Integer.parseInt(a), Integer.parseInt(v))); :}
	  		|   RETURN								{: maquina.memInstrucao.add(new Retorno()); :}
	  		|   JUMP IDENTIFICADOR:e				{: maquina.memInstrucao.add(new SaltoInst(e)); :}
	  		|   JEQ IDENTIFICADOR:e					{: maquina.memInstrucao.add(new SaltoEq(e)); :}
	  		|   JLT IDENTIFICADOR:e					{: maquina.memInstrucao.add(new SaltoLt(e)); :}	
	  		|   PRINT								{: maquina.memInstrucao.add(new Print()); :}
	  		|   PRINT_STR STRING:s					{: maquina.memInstrucao.add(new PrintStr(s)); :}
	  		|   PRINT_NL							{: maquina.memInstrucao.add(new PrintNl()); :}
	  		;
